import { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useToast } from "@/hooks/use-toast";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogClose,
} from "@/components/ui/dialog";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { queryClient, apiRequest } from "@/lib/queryClient";
import { 
  Loader2, 
  Plus, 
  Edit, 
  Trash2, 
  PlusCircle, 
  LayoutList 
} from "lucide-react";

// Esquema para validar las categorías de reglas
const ruleCategorySchema = z.object({
  name: z.string().min(3, "El nombre debe tener al menos 3 caracteres"),
  description: z.string().min(5, "La descripción debe tener al menos 5 caracteres"),
});

type RuleCategoryFormValues = z.infer<typeof ruleCategorySchema>;

// Esquema para validar las reglas
const ruleSchema = z.object({
  categoryId: z.number({
    required_error: "La categoría es requerida",
  }),
  title: z.string().min(3, "El título debe tener al menos 3 caracteres"),
  description: z.string().min(5, "La descripción debe tener al menos 5 caracteres"),
});

type RuleFormValues = z.infer<typeof ruleSchema>;

// Tipos para los datos
type RuleCategory = {
  id: number;
  name: string;
  description: string;
  order: number;
  createdAt: string;
  updatedAt: string;
};

type Rule = {
  id: number;
  categoryId: number;
  title: string;
  description: string;
  order: number;
  createdAt: string;
  updatedAt: string;
};

export default function RuleManagement() {
  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState<string>("categories");
  
  // Estado para gestionar los diálogos
  const [isAddCategoryDialogOpen, setIsAddCategoryDialogOpen] = useState(false);
  const [isEditCategoryDialogOpen, setIsEditCategoryDialogOpen] = useState(false);
  const [editingCategory, setEditingCategory] = useState<RuleCategory | null>(null);
  const [deleteCategoryId, setDeleteCategoryId] = useState<number | null>(null);
  
  const [isAddRuleDialogOpen, setIsAddRuleDialogOpen] = useState(false);
  const [isEditRuleDialogOpen, setIsEditRuleDialogOpen] = useState(false);
  const [editingRule, setEditingRule] = useState<Rule | null>(null);
  const [deleteRuleId, setDeleteRuleId] = useState<number | null>(null);
  
  // Estado para rastrear la categoría seleccionada
  const [selectedCategoryId, setSelectedCategoryId] = useState<number | null>(null);
  
  // Consulta para obtener las categorías de reglas
  const { 
    data: categories, 
    isLoading: isCategoriesLoading 
  } = useQuery({
    queryKey: ["/api/rule-categories"],
    queryFn: async () => {
      const res = await fetch("/api/rule-categories");
      if (!res.ok) {
        throw new Error("Error al cargar las categorías de reglas");
      }
      return await res.json() as RuleCategory[];
    },
  });
  
  // Consulta para obtener las reglas de una categoría específica
  const { 
    data: rulesForCategory, 
    isLoading: isRulesLoading 
  } = useQuery({
    queryKey: ["/api/rules/category", selectedCategoryId],
    queryFn: async () => {
      if (!selectedCategoryId) return [];
      const res = await fetch(`/api/rules/category/${selectedCategoryId}`);
      if (!res.ok) {
        throw new Error("Error al cargar las reglas");
      }
      return await res.json() as Rule[];
    },
    enabled: !!selectedCategoryId,
  });
  
  // Mutación para crear una nueva categoría
  const createCategoryMutation = useMutation({
    mutationFn: async (data: RuleCategoryFormValues) => {
      const res = await apiRequest("/api/rule-categories", { method: "POST", data });
      if (!res.ok) {
        const error = await res.json();
        throw new Error(error.error || "Error al crear la categoría");
      }
      return await res.json();
    },
    onSuccess: () => {
      toast({
        title: "Categoría creada",
        description: "La categoría ha sido creada exitosamente",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/rule-categories"] });
      setIsAddCategoryDialogOpen(false);
      addCategoryForm.reset();
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });
  
  // Mutación para actualizar una categoría
  const updateCategoryMutation = useMutation({
    mutationFn: async ({ id, data }: { id: number; data: RuleCategoryFormValues }) => {
      const res = await apiRequest(`/api/rule-categories/${id}`, { method: "PUT", data });
      if (!res.ok) {
        const error = await res.json();
        throw new Error(error.error || "Error al actualizar la categoría");
      }
      return await res.json();
    },
    onSuccess: () => {
      toast({
        title: "Categoría actualizada",
        description: "La categoría ha sido actualizada exitosamente",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/rule-categories"] });
      setIsEditCategoryDialogOpen(false);
      setEditingCategory(null);
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });
  
  // Mutación para eliminar una categoría
  const deleteCategoryMutation = useMutation({
    mutationFn: async (id: number) => {
      const res = await apiRequest(`/api/rule-categories/${id}`, { method: "DELETE" });
      if (!res.ok) {
        const error = await res.json().catch(() => ({}));
        throw new Error(error.error || "Error al eliminar la categoría");
      }
      return true;
    },
    onSuccess: () => {
      toast({
        title: "Categoría eliminada",
        description: "La categoría y todas sus reglas han sido eliminadas exitosamente",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/rule-categories"] });
      queryClient.invalidateQueries({ queryKey: ["/api/rules/category"] });
      setDeleteCategoryId(null);
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });
  
  // Mutación para crear una nueva regla
  const createRuleMutation = useMutation({
    mutationFn: async (data: RuleFormValues) => {
      const res = await apiRequest("/api/rules", { method: "POST", data });
      if (!res.ok) {
        const error = await res.json();
        throw new Error(error.error || "Error al crear la regla");
      }
      return await res.json();
    },
    onSuccess: (_, variables) => {
      toast({
        title: "Regla creada",
        description: "La regla ha sido creada exitosamente",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/rules/category", variables.categoryId] });
      setIsAddRuleDialogOpen(false);
      addRuleForm.reset();
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });
  
  // Mutación para actualizar una regla
  const updateRuleMutation = useMutation({
    mutationFn: async ({ id, data }: { id: number; data: RuleFormValues }) => {
      const res = await apiRequest(`/api/rules/${id}`, { method: "PUT", data });
      if (!res.ok) {
        const error = await res.json();
        throw new Error(error.error || "Error al actualizar la regla");
      }
      return await res.json();
    },
    onSuccess: (_, variables) => {
      toast({
        title: "Regla actualizada",
        description: "La regla ha sido actualizada exitosamente",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/rules/category", variables.data.categoryId] });
      setIsEditRuleDialogOpen(false);
      setEditingRule(null);
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });
  
  // Mutación para eliminar una regla
  const deleteRuleMutation = useMutation({
    mutationFn: async (id: number) => {
      const res = await apiRequest(`/api/rules/${id}`, { method: "DELETE" });
      if (!res.ok) {
        const error = await res.json().catch(() => ({}));
        throw new Error(error.error || "Error al eliminar la regla");
      }
      return true;
    },
    onSuccess: () => {
      toast({
        title: "Regla eliminada",
        description: "La regla ha sido eliminada exitosamente",
      });
      if (editingRule) {
        queryClient.invalidateQueries({ queryKey: ["/api/rules/category", editingRule.categoryId] });
      }
      setDeleteRuleId(null);
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });
  
  // Formularios
  const addCategoryForm = useForm<RuleCategoryFormValues>({
    resolver: zodResolver(ruleCategorySchema),
    defaultValues: {
      name: "",
      description: "",
    },
  });
  
  const editCategoryForm = useForm<RuleCategoryFormValues>({
    resolver: zodResolver(ruleCategorySchema),
    defaultValues: {
      name: "",
      description: "",
    },
  });
  
  const addRuleForm = useForm<RuleFormValues>({
    resolver: zodResolver(ruleSchema),
    defaultValues: {
      categoryId: 0,
      title: "",
      description: "",
    },
  });
  
  const editRuleForm = useForm<RuleFormValues>({
    resolver: zodResolver(ruleSchema),
    defaultValues: {
      categoryId: 0,
      title: "",
      description: "",
    },
  });
  
  // Funciones para manejar los formularios
  const handleAddCategory = (data: RuleCategoryFormValues) => {
    createCategoryMutation.mutate(data);
  };
  
  const handleEditCategory = (data: RuleCategoryFormValues) => {
    if (editingCategory) {
      updateCategoryMutation.mutate({ id: editingCategory.id, data });
    }
  };
  
  const openEditCategoryDialog = (category: RuleCategory) => {
    setEditingCategory(category);
    editCategoryForm.reset({
      name: category.name,
      description: category.description,
    });
    setIsEditCategoryDialogOpen(true);
  };
  
  const confirmDeleteCategory = (category: RuleCategory) => {
    setDeleteCategoryId(category.id);
  };
  
  const handleAddRule = (data: RuleFormValues) => {
    createRuleMutation.mutate(data);
  };
  
  const handleEditRule = (data: RuleFormValues) => {
    if (editingRule) {
      updateRuleMutation.mutate({ id: editingRule.id, data });
    }
  };
  
  const openEditRuleDialog = (rule: Rule) => {
    setEditingRule(rule);
    editRuleForm.reset({
      categoryId: rule.categoryId,
      title: rule.title,
      description: rule.description,
    });
    setIsEditRuleDialogOpen(true);
  };
  
  const confirmDeleteRule = (rule: Rule) => {
    setEditingRule(rule);
    setDeleteRuleId(rule.id);
  };
  
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-3xl font-bold tracking-tight">Administración de Reglas</h2>
      </div>
      
      <Tabs defaultValue="categories" value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="w-full">
          <TabsTrigger value="categories" className="flex items-center">
            <LayoutList className="h-4 w-4 mr-2" />
            Categorías
          </TabsTrigger>
          <TabsTrigger value="rules" className="flex items-center">
            <PlusCircle className="h-4 w-4 mr-2" />
            Reglas
          </TabsTrigger>
        </TabsList>
        
        {/* Tab para administrar categorías */}
        <TabsContent value="categories" className="py-4">
          <div className="flex justify-end mb-6">
            <Dialog open={isAddCategoryDialogOpen} onOpenChange={setIsAddCategoryDialogOpen}>
              <DialogTrigger asChild>
                <Button>
                  <Plus className="mr-2 h-4 w-4" />
                  Nueva Categoría
                </Button>
              </DialogTrigger>
              <DialogContent className="<DialogContent className="<DialogContent className="<DialogContent className="sm:max-w-[500px]">" className="max-h-[90vh] overflow-y-auto">" className="max-h-[90vh] overflow-y-auto">" className="max-h-[90vh] overflow-y-auto">" className="max-h-[90vh] overflow-y-auto">" className="max-h-[90vh] overflow-y-auto">" className="max-h-[90vh] overflow-y-auto">" className="max-h-[90vh] overflow-y-auto">
                <DialogHeader>
                  <DialogTitle>Crear Nueva Categoría</DialogTitle>
                  <DialogDescription>
                    Crea una nueva categoría para organizar las reglas del servidor.
                  </DialogDescription>
                </DialogHeader>
                <Form {...addCategoryForm}>
                  <form onSubmit={addCategoryForm.handleSubmit(handleAddCategory)} className="space-y-4">
                    <FormField
                      control={addCategoryForm.control}
                      name="name"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Nombre</FormLabel>
                          <FormControl>
                            <Input placeholder="Nombre de la categoría" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={addCategoryForm.control}
                      name="description"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Descripción</FormLabel>
                          <FormControl>
                            <Textarea 
                              placeholder="Descripción breve de la categoría" 
                              {...field} 
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <DialogFooter>
                      <DialogClose asChild>
                        <Button variant="outline">Cancelar</Button>
                      </DialogClose>
                      <Button 
                        type="submit" 
                        disabled={createCategoryMutation.isPending}
                      >
                        {createCategoryMutation.isPending && (
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        )}
                        Crear Categoría
                      </Button>
                    </DialogFooter>
                  </form>
                </Form>
              </DialogContent>
            </Dialog>
          </div>
          
          {isCategoriesLoading ? (
            <div className="flex justify-center py-8">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
            </div>
          ) : categories && categories.length > 0 ? (
            <div className="grid grid-cols-1 gap-6">
              {categories.map((category) => (
                <Card key={category.id} className="relative overflow-hidden">
                  <CardHeader>
                    <CardTitle className="flex justify-between items-center">
                      <span>{category.name}</span>
                      <div className="flex space-x-2">
                        <Button 
                          variant="outline" 
                          size="icon"
                          onClick={() => openEditCategoryDialog(category)}
                        >
                          <Edit className="h-4 w-4" />
                        </Button>
                        <AlertDialog>
                          <AlertDialogTrigger asChild>
                            <Button 
                              variant="destructive" 
                              size="icon"
                              onClick={() => confirmDeleteCategory(category)}
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </AlertDialogTrigger>
                          
                          {deleteCategoryId === category.id && (
                            <AlertDialogContent>
                              <AlertDialogHeader>
                                <AlertDialogTitle>¿Estás seguro?</AlertDialogTitle>
                                <AlertDialogDescription>
                                  Esta acción no se puede deshacer. Todas las reglas de esta categoría también serán eliminadas.
                                </AlertDialogDescription>
                              </AlertDialogHeader>
                              <AlertDialogFooter>
                                <AlertDialogCancel onClick={() => setDeleteCategoryId(null)}>
                                  Cancelar
                                </AlertDialogCancel>
                                <AlertDialogAction 
                                  onClick={() => deleteCategoryMutation.mutate(category.id)}
                                  disabled={deleteCategoryMutation.isPending}
                                  className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                                >
                                  {deleteCategoryMutation.isPending && (
                                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                  )}
                                  Eliminar
                                </AlertDialogAction>
                              </AlertDialogFooter>
                            </AlertDialogContent>
                          )}
                        </AlertDialog>
                      </div>
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-sm text-muted-foreground">{category.description}</p>
                  </CardContent>
                  <CardFooter>
                    <Button 
                      variant="outline" 
                      size="sm"
                      onClick={() => {
                        setActiveTab("rules");
                        setSelectedCategoryId(category.id);
                      }}
                    >
                      Ver Reglas
                    </Button>
                  </CardFooter>
                </Card>
              ))}
            </div>
          ) : (
            <div className="text-center py-12 border rounded-lg bg-card">
              <p className="text-muted-foreground">No hay categorías disponibles.</p>
              <Button 
                variant="link" 
                onClick={() => setIsAddCategoryDialogOpen(true)}
                className="mt-2"
              >
                <Plus className="h-4 w-4 mr-1" />
                Añadir una categoría
              </Button>
            </div>
          )}
          
          {/* Diálogo para editar una categoría */}
          <Dialog open={isEditCategoryDialogOpen} onOpenChange={setIsEditCategoryDialogOpen}>
            <DialogContent className="<DialogContent className="<DialogContent className="<DialogContent className="sm:max-w-[500px]">" className="max-h-[90vh] overflow-y-auto">" className="max-h-[90vh] overflow-y-auto">" className="max-h-[90vh] overflow-y-auto">" className="max-h-[90vh] overflow-y-auto">" className="max-h-[90vh] overflow-y-auto">" className="max-h-[90vh] overflow-y-auto">" className="max-h-[90vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>Editar Categoría</DialogTitle>
                <DialogDescription>
                  Modifica los detalles de la categoría.
                </DialogDescription>
              </DialogHeader>
              {editingCategory && (
                <Form {...editCategoryForm}>
                  <form onSubmit={editCategoryForm.handleSubmit(handleEditCategory)} className="space-y-4">
                    <FormField
                      control={editCategoryForm.control}
                      name="name"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Nombre</FormLabel>
                          <FormControl>
                            <Input placeholder="Nombre de la categoría" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={editCategoryForm.control}
                      name="description"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Descripción</FormLabel>
                          <FormControl>
                            <Textarea 
                              placeholder="Descripción breve de la categoría" 
                              {...field} 
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <DialogFooter>
                      <DialogClose asChild>
                        <Button variant="outline" onClick={() => {
                          setIsEditCategoryDialogOpen(false);
                          setEditingCategory(null);
                        }}>
                          Cancelar
                        </Button>
                      </DialogClose>
                      <Button 
                        type="submit" 
                        disabled={updateCategoryMutation.isPending}
                      >
                        {updateCategoryMutation.isPending && (
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        )}
                        Guardar Cambios
                      </Button>
                    </DialogFooter>
                  </form>
                </Form>
              )}
            </DialogContent>
          </Dialog>
        </TabsContent>
        
        {/* Tab para administrar reglas */}
        <TabsContent value="rules" className="py-4">
          <div className="flex justify-between items-center mb-6">
            <h3 className="text-xl font-semibold">
              {selectedCategoryId ? (
                <>
                  Reglas de{" "}
                  <span className="text-primary">
                    {categories?.find(c => c.id === selectedCategoryId)?.name || "Categoría"}
                  </span>
                </>
              ) : (
                "Selecciona una categoría para ver sus reglas"
              )}
            </h3>
            
            <Dialog open={isAddRuleDialogOpen} onOpenChange={setIsAddRuleDialogOpen}>
              <DialogTrigger asChild>
                <Button disabled={!categories || categories.length === 0}>
                  <Plus className="mr-2 h-4 w-4" />
                  Nueva Regla
                </Button>
              </DialogTrigger>
              <DialogContent className="<DialogContent className="<DialogContent className="<DialogContent className="sm:max-w-[500px]">" className="max-h-[90vh] overflow-y-auto">" className="max-h-[90vh] overflow-y-auto">" className="max-h-[90vh] overflow-y-auto">" className="max-h-[90vh] overflow-y-auto">" className="max-h-[90vh] overflow-y-auto">" className="max-h-[90vh] overflow-y-auto">" className="max-h-[90vh] overflow-y-auto">
                <DialogHeader>
                  <DialogTitle>Crear Nueva Regla</DialogTitle>
                  <DialogDescription>
                    Crea una nueva regla para el servidor.
                  </DialogDescription>
                </DialogHeader>
                <Form {...addRuleForm}>
                  <form onSubmit={addRuleForm.handleSubmit(handleAddRule)} className="space-y-4">
                    <FormField
                      control={addRuleForm.control}
                      name="categoryId"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Categoría</FormLabel>
                          <Select 
                            onValueChange={(value) => field.onChange(parseInt(value))}
                            defaultValue={selectedCategoryId ? selectedCategoryId.toString() : ""}
                          >
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Selecciona una categoría" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              {categories?.map((category) => (
                                <SelectItem 
                                  key={category.id} 
                                  value={category.id.toString()}
                                >
                                  {category.name}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={addRuleForm.control}
                      name="title"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Título</FormLabel>
                          <FormControl>
                            <Input placeholder="Título de la regla" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={addRuleForm.control}
                      name="description"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Descripción</FormLabel>
                          <FormControl>
                            <Textarea 
                              placeholder="Descripción detallada de la regla" 
                              {...field} 
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <DialogFooter>
                      <DialogClose asChild>
                        <Button variant="outline">Cancelar</Button>
                      </DialogClose>
                      <Button 
                        type="submit" 
                        disabled={createRuleMutation.isPending}
                      >
                        {createRuleMutation.isPending && (
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        )}
                        Crear Regla
                      </Button>
                    </DialogFooter>
                  </form>
                </Form>
              </DialogContent>
            </Dialog>
          </div>
          
          {!selectedCategoryId ? (
            <div className="text-center py-12 border rounded-lg bg-card">
              <p className="text-muted-foreground">
                Por favor, selecciona una categoría para ver y administrar sus reglas.
              </p>
              <Button 
                variant="link" 
                onClick={() => setActiveTab("categories")}
                className="mt-2"
              >
                Ir a Categorías
              </Button>
            </div>
          ) : isRulesLoading ? (
            <div className="flex justify-center py-8">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
            </div>
          ) : rulesForCategory && rulesForCategory.length > 0 ? (
            <div className="grid grid-cols-1 gap-4">
              {rulesForCategory.map((rule) => (
                <Card key={rule.id} className="relative">
                  <CardHeader>
                    <CardTitle className="text-lg">{rule.title}</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-sm">{rule.description}</p>
                  </CardContent>
                  <CardFooter className="flex justify-end gap-2">
                    <Button 
                      variant="outline" 
                      size="icon" 
                      onClick={() => openEditRuleDialog(rule)}
                    >
                      <Edit className="h-4 w-4" />
                    </Button>
                    <AlertDialog>
                      <AlertDialogTrigger asChild>
                        <Button 
                          variant="destructive" 
                          size="icon"
                          onClick={() => confirmDeleteRule(rule)}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </AlertDialogTrigger>
                      
                      {deleteRuleId === rule.id && (
                        <AlertDialogContent>
                          <AlertDialogHeader>
                            <AlertDialogTitle>¿Estás seguro?</AlertDialogTitle>
                            <AlertDialogDescription>
                              Esta acción no se puede deshacer. La regla será eliminada permanentemente.
                            </AlertDialogDescription>
                          </AlertDialogHeader>
                          <AlertDialogFooter>
                            <AlertDialogCancel onClick={() => setDeleteRuleId(null)}>
                              Cancelar
                            </AlertDialogCancel>
                            <AlertDialogAction 
                              onClick={() => deleteRuleMutation.mutate(rule.id)}
                              disabled={deleteRuleMutation.isPending}
                              className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                            >
                              {deleteRuleMutation.isPending && (
                                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                              )}
                              Eliminar
                            </AlertDialogAction>
                          </AlertDialogFooter>
                        </AlertDialogContent>
                      )}
                    </AlertDialog>
                  </CardFooter>
                </Card>
              ))}
            </div>
          ) : (
            <div className="text-center py-12 border rounded-lg bg-card">
              <p className="text-muted-foreground">No hay reglas en esta categoría.</p>
              <Button 
                variant="link" 
                onClick={() => {
                  addRuleForm.setValue("categoryId", selectedCategoryId);
                  setIsAddRuleDialogOpen(true);
                }}
                className="mt-2"
              >
                <Plus className="h-4 w-4 mr-1" />
                Añadir una regla
              </Button>
            </div>
          )}
          
          {/* Diálogo para editar una regla */}
          <Dialog open={isEditRuleDialogOpen} onOpenChange={setIsEditRuleDialogOpen}>
            <DialogContent className="<DialogContent className="<DialogContent className="<DialogContent className="sm:max-w-[500px]">" className="max-h-[90vh] overflow-y-auto">" className="max-h-[90vh] overflow-y-auto">" className="max-h-[90vh] overflow-y-auto">" className="max-h-[90vh] overflow-y-auto">" className="max-h-[90vh] overflow-y-auto">" className="max-h-[90vh] overflow-y-auto">" className="max-h-[90vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>Editar Regla</DialogTitle>
                <DialogDescription>
                  Modifica los detalles de la regla.
                </DialogDescription>
              </DialogHeader>
              {editingRule && (
                <Form {...editRuleForm}>
                  <form onSubmit={editRuleForm.handleSubmit(handleEditRule)} className="space-y-4">
                    <FormField
                      control={editRuleForm.control}
                      name="categoryId"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Categoría</FormLabel>
                          <Select 
                            onValueChange={(value) => field.onChange(parseInt(value))}
                            defaultValue={field.value.toString()}
                          >
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Selecciona una categoría" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              {categories?.map((category) => (
                                <SelectItem 
                                  key={category.id} 
                                  value={category.id.toString()}
                                >
                                  {category.name}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={editRuleForm.control}
                      name="title"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Título</FormLabel>
                          <FormControl>
                            <Input placeholder="Título de la regla" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={editRuleForm.control}
                      name="description"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Descripción</FormLabel>
                          <FormControl>
                            <Textarea 
                              placeholder="Descripción detallada de la regla" 
                              {...field} 
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <DialogFooter>
                      <DialogClose asChild>
                        <Button variant="outline" onClick={() => {
                          setIsEditRuleDialogOpen(false);
                          setEditingRule(null);
                        }}>
                          Cancelar
                        </Button>
                      </DialogClose>
                      <Button 
                        type="submit" 
                        disabled={updateRuleMutation.isPending}
                      >
                        {updateRuleMutation.isPending && (
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        )}
                        Guardar Cambios
                      </Button>
                    </DialogFooter>
                  </form>
                </Form>
              )}
            </DialogContent>
          </Dialog>
        </TabsContent>
      </Tabs>
    </div>
  );
}